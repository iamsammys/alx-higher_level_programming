========================================================================
'Test for 7-base_geometry'
========================================================================
'Funtions to test:   area(self) and integer_validator inside\
	          BaseGeometry class'
========================================================================

>>> BaseGeometry = __import__("7-base_geometry").BaseGeometry

'testing module docstring'
>>> m = __import__("7-base_geometry").__doc__
>>> len(m) > 1
True

'testing class docstring'
>>> c = BaseGeometry.__doc__
>>> len(c) > 1
True

'testing method docstring for area'
>>> f = BaseGeometry.area.__doc__
>>> len(f) > 1
True

'testing method docstring for integer_validator'
>>> f = BaseGeometry.integer_validator.__doc__
>>> len(f) > 1
True

'first is string and second is integer'
>>> base = BaseGeometry()
>>> base.integer_validator("my_int", 12)

'first is string and second is floating'
>>> base = BaseGeometry()
>>> base.integer_validator("my_int", 12.4)
Traceback (most recent call last):
...
TypeError: my_int must be an integer

'first is string and second is string'
>>> base = BaseGeometry()
>>> base.integer_validator("my_int", "integer")
Traceback (most recent call last):
...
TypeError: my_int must be an integer

'first is string and second is 0'
>>> base = BaseGeometry()
>>> base.integer_validator("my_int", 0)
Traceback (most recent call last):
...
ValueError: my_int must be greater than 0

'first is string and second is negative'
>>> base = BaseGeometry()
>>> base.integer_validator("my_int", -7)
Traceback (most recent call last):
...
ValueError: my_int must be greater than 0

'Just one argument'
>>> base = BaseGeometry()
>>> base.integer_validator("my_int")
Traceback (most recent call last):
...
TypeError: BaseGeometry.integer_validator() missing 1 required positional argument: 'value'
